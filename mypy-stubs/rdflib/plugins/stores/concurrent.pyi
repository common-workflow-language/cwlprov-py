from collections.abc import Generator
from typing import Any

class ResponsibleGenerator:
    cleanup: Any
    gen: Any
    def __init__(self, gen, cleanup) -> None: ...
    def __del__(self) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

class ConcurrentStore:
    store: Any
    def __init__(self, store) -> None: ...
    def add(self, triple) -> None: ...
    def remove(self, triple) -> None: ...
    def triples(self, triple) -> Generator[Any, None, None]: ...
    def __len__(self): ...
