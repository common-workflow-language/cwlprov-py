from collections.abc import Generator
from rdflib.store import Store
from typing import Any

class SimpleMemory(Store):
    identifier: Any
    def __init__(self, configuration: Any | None = ..., identifier: Any | None = ...) -> None: ...
    def add(self, triple, context, quoted: bool = ...) -> None: ...
    def remove(self, triple_pattern, context: Any | None = ...) -> None: ...
    def triples(self, triple_pattern, context: Any | None = ...) -> Generator[Any, None, None]: ...
    def __len__(self, context: Any | None = ...): ...
    def bind(self, prefix, namespace) -> None: ...
    def namespace(self, prefix): ...
    def prefix(self, namespace): ...
    def namespaces(self) -> Generator[Any, None, None]: ...
    def query(self, query, initNs, initBindings, queryGraph, **kwargs) -> None: ...
    def update(self, update, initNs, initBindings, queryGraph, **kwargs) -> None: ...

class Memory(Store):
    context_aware: bool
    formula_aware: bool
    graph_aware: bool
    identifier: Any
    def __init__(self, configuration: Any | None = ..., identifier: Any | None = ...) -> None: ...
    def add(self, triple, context, quoted: bool = ...) -> None: ...
    def remove(self, triple_pattern, context: Any | None = ...) -> None: ...
    def triples(self, triple_pattern, context: Any | None = ...) -> Generator[Any, None, None]: ...
    def bind(self, prefix, namespace) -> None: ...
    def namespace(self, prefix): ...
    def prefix(self, namespace): ...
    def namespaces(self) -> Generator[Any, None, None]: ...
    def contexts(self, triple: Any | None = ...): ...
    def __len__(self, context: Any | None = ...): ...
    def add_graph(self, graph) -> None: ...
    def remove_graph(self, graph) -> None: ...
    def query(self, query, initNs, initBindings, queryGraph, **kwargs) -> None: ...
    def update(self, update, initNs, initBindings, queryGraph, **kwargs) -> None: ...
