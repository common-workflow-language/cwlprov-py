from rdflib import Literal as Literal, XSD as XSD
from rdflib.plugins.sparql.datatypes import type_promotion as type_promotion
from rdflib.plugins.sparql.evalutils import NotBoundError as NotBoundError
from rdflib.plugins.sparql.operators import numeric as numeric
from rdflib.plugins.sparql.sparql import SPARQLTypeError as SPARQLTypeError
from typing import Any

class Accumulator:
    var: Any
    expr: Any
    distinct: bool
    seen: Any
    def __init__(self, aggregation) -> None: ...
    def dont_care(self, row): ...
    def use_row(self, row): ...
    def set_value(self, bindings) -> None: ...

class Counter(Accumulator):
    value: int
    def __init__(self, aggregation) -> None: ...
    def update(self, row, aggregator) -> None: ...
    def get_value(self): ...
    def eval_row(self, row): ...
    def eval_full_row(self, row): ...
    def use_row(self, row): ...

def type_safe_numbers(*args): ...

class Sum(Accumulator):
    value: int
    datatype: Any
    def __init__(self, aggregation) -> None: ...
    def update(self, row, aggregator) -> None: ...
    def get_value(self): ...

class Average(Accumulator):
    counter: int
    sum: int
    datatype: Any
    def __init__(self, aggregation) -> None: ...
    def update(self, row, aggregator) -> None: ...
    def get_value(self): ...

class Extremum(Accumulator):
    value: Any
    use_row: Any
    def __init__(self, aggregation) -> None: ...
    def set_value(self, bindings) -> None: ...
    def update(self, row, aggregator) -> None: ...

class Minimum(Extremum):
    def compare(self, val1, val2): ...

class Maximum(Extremum):
    def compare(self, val1, val2): ...

class Sample(Accumulator):
    use_row: Any
    def __init__(self, aggregation) -> None: ...
    def update(self, row, aggregator) -> None: ...
    def get_value(self) -> None: ...

class GroupConcat(Accumulator):
    value: Any
    separator: Any
    def __init__(self, aggregation) -> None: ...
    def update(self, row, aggregator) -> None: ...
    def get_value(self): ...

class Aggregator:
    accumulator_classes: Any
    bindings: Any
    accumulators: Any
    def __init__(self, aggregations) -> None: ...
    def update(self, row) -> None: ...
    def get_bindings(self): ...
