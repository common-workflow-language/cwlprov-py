import datetime as py_datetime
from rdflib import BNode as BNode, Literal as Literal, RDF as RDF, URIRef as URIRef, Variable as Variable, XSD as XSD
from rdflib.plugins.sparql.datatypes import XSD_DTs as XSD_DTs, XSD_DateTime_DTs as XSD_DateTime_DTs, XSD_Duration_DTs as XSD_Duration_DTs, type_promotion as type_promotion
from rdflib.plugins.sparql.parserutils import CompValue as CompValue, Expr as Expr
from rdflib.plugins.sparql.sparql import SPARQLError as SPARQLError, SPARQLTypeError as SPARQLTypeError
from rdflib.term import Node as Node
from typing import Any

def Builtin_IRI(expr, ctx): ...
def Builtin_isBLANK(expr, ctx): ...
def Builtin_isLITERAL(expr, ctx): ...
def Builtin_isIRI(expr, ctx): ...
def Builtin_isNUMERIC(expr, ctx): ...
def Builtin_BNODE(expr, ctx): ...
def Builtin_ABS(expr, ctx): ...
def Builtin_IF(expr, ctx): ...
def Builtin_RAND(expr, ctx): ...
def Builtin_UUID(expr, ctx): ...
def Builtin_STRUUID(expr, ctx): ...
def Builtin_MD5(expr, ctx): ...
def Builtin_SHA1(expr, ctx): ...
def Builtin_SHA256(expr, ctx): ...
def Builtin_SHA384(expr, ctx): ...
def Builtin_SHA512(expr, ctx): ...
def Builtin_COALESCE(expr, ctx): ...
def Builtin_CEIL(expr, ctx): ...
def Builtin_FLOOR(expr, ctx): ...
def Builtin_ROUND(expr, ctx): ...
def Builtin_REGEX(expr, ctx): ...
def Builtin_REPLACE(expr, ctx): ...
def Builtin_STRDT(expr, ctx): ...
def Builtin_STRLANG(expr, ctx): ...
def Builtin_CONCAT(expr, ctx): ...
def Builtin_STRSTARTS(expr, ctx): ...
def Builtin_STRENDS(expr, ctx): ...
def Builtin_STRBEFORE(expr, ctx): ...
def Builtin_STRAFTER(expr, ctx): ...
def Builtin_CONTAINS(expr, ctx): ...
def Builtin_ENCODE_FOR_URI(expr, ctx): ...
def Builtin_SUBSTR(expr, ctx): ...
def Builtin_STRLEN(e, ctx): ...
def Builtin_STR(e, ctx): ...
def Builtin_LCASE(e, ctx): ...
def Builtin_LANGMATCHES(e, ctx): ...
def Builtin_NOW(e, ctx): ...
def Builtin_YEAR(e, ctx): ...
def Builtin_MONTH(e, ctx): ...
def Builtin_DAY(e, ctx): ...
def Builtin_HOURS(e, ctx): ...
def Builtin_MINUTES(e, ctx): ...
def Builtin_SECONDS(e, ctx): ...
def Builtin_TIMEZONE(e, ctx): ...
def Builtin_TZ(e, ctx): ...
def Builtin_UCASE(e, ctx): ...
def Builtin_LANG(e, ctx): ...
def Builtin_DATATYPE(e, ctx): ...
def Builtin_sameTerm(e, ctx): ...
def Builtin_BOUND(e, ctx): ...
def Builtin_EXISTS(e, ctx): ...
def register_custom_function(uri, func, override: bool = ..., raw: bool = ...) -> None: ...
def custom_function(uri, override: bool = ..., raw: bool = ...): ...
def unregister_custom_function(uri, func) -> None: ...
def Function(e, ctx): ...
def default_cast(e, ctx): ...
def UnaryNot(expr, ctx): ...
def UnaryMinus(expr, ctx): ...
def UnaryPlus(expr, ctx): ...
def MultiplicativeExpression(e, ctx): ...
def AdditiveExpression(e, ctx): ...
def RelationalExpression(e, ctx): ...
def ConditionalAndExpression(e, ctx): ...
def ConditionalOrExpression(e, ctx): ...
def not_(arg): ...
def and_(*args): ...

TrueFilter: Any

def simplify(expr): ...
def literal(s): ...
def datetime(e): ...
def date(e) -> py_datetime.date: ...
def string(s): ...
def numeric(expr): ...
def dateTimeObjects(expr): ...
def isCompatibleDateTimeDatatype(obj1, dt1, obj2, dt2): ...
def calculateDuration(obj1, obj2): ...
def calculateFinalDateTime(obj1, dt1, obj2, dt2, operation): ...
def EBV(rt): ...
