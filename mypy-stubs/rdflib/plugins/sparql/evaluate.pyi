from collections.abc import Generator
from rdflib import BNode as BNode, Graph as Graph, Literal as Literal, URIRef as URIRef, Variable as Variable
from rdflib.plugins.sparql import CUSTOM_EVALS as CUSTOM_EVALS, parser as parser
from rdflib.plugins.sparql.aggregates import Aggregator as Aggregator
from rdflib.plugins.sparql.parserutils import value as value
from rdflib.plugins.sparql.sparql import AlreadyBound as AlreadyBound, Bindings as Bindings, FrozenBindings as FrozenBindings, QueryContext as QueryContext, SPARQLError as SPARQLError
from typing import Any

def evalBGP(ctx, bgp) -> Generator[Any, None, None]: ...
def evalExtend(ctx, extend) -> Generator[Any, None, None]: ...
def evalLazyJoin(ctx, join) -> Generator[Any, None, None]: ...
def evalJoin(ctx, join): ...
def evalUnion(ctx, union): ...
def evalMinus(ctx, minus): ...
def evalLeftJoin(ctx, join) -> Generator[Any, None, None]: ...
def evalFilter(ctx, part) -> Generator[Any, None, None]: ...
def evalGraph(ctx, part) -> Generator[Any, None, None]: ...
def evalValues(ctx, part) -> Generator[Any, None, None]: ...
def evalMultiset(ctx, part): ...
def evalPart(ctx, part): ...
def evalServiceQuery(ctx, part) -> Generator[Any, None, None]: ...
def evalGroup(ctx, group): ...
def evalAggregateJoin(ctx, agg) -> Generator[Any, None, Any]: ...
def evalOrderBy(ctx, part): ...
def evalSlice(ctx, slice): ...
def evalReduced(ctx, part) -> Generator[Any, None, None]: ...
def evalDistinct(ctx, part) -> Generator[Any, None, None]: ...
def evalProject(ctx, project): ...
def evalSelectQuery(ctx, query): ...
def evalAskQuery(ctx, query): ...
def evalConstructQuery(ctx, query): ...
def evalQuery(graph, query, initBindings, base: Any | None = ...): ...
