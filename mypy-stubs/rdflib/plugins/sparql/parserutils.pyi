from collections import OrderedDict
from pyparsing import TokenConverter
from rdflib import BNode as BNode, Variable as Variable
from rdflib.plugins.sparql.sparql import NotBoundError as NotBoundError, SPARQLError as SPARQLError
from typing import Any

def value(ctx, val, variables: bool = ..., errors: bool = ...): ...

class ParamValue:
    isList: Any
    name: Any
    tokenList: Any
    def __init__(self, name, tokenList, isList) -> None: ...

class Param(TokenConverter):
    isList: Any
    def __init__(self, name, expr, isList: bool = ...) -> None: ...
    def postParse2(self, tokenList): ...

class ParamList(Param):
    def __init__(self, name, expr) -> None: ...

class plist(list): ...

class CompValue(OrderedDict):
    name: Any
    def __init__(self, name, **values) -> None: ...
    def clone(self): ...
    def __getitem__(self, a): ...
    def get(self, a, variables: bool = ..., errors: bool = ...): ...
    def __getattr__(self, a): ...

class Expr(CompValue):
    def __init__(self, name, evalfn: Any | None = ..., **values) -> None: ...
    ctx: Any
    def eval(self, ctx=...): ...

class Comp(TokenConverter):
    expr: Any
    evalfn: Any
    def __init__(self, name, expr) -> None: ...
    def postParse(self, instring, loc, tokenList): ...
    def setEvalFn(self, evalfn): ...

def prettify_parsetree(t, indent: str = ..., depth: int = ...): ...
