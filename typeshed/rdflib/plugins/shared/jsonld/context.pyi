from .errors import INVALID_CONTEXT_ENTRY as INVALID_CONTEXT_ENTRY, INVALID_REMOTE_CONTEXT as INVALID_REMOTE_CONTEXT, RECURSIVE_CONTEXT_INCLUSION as RECURSIVE_CONTEXT_INCLUSION
from .keys import BASE as BASE, CONTAINER as CONTAINER, CONTEXT as CONTEXT, GRAPH as GRAPH, ID as ID, IMPORT as IMPORT, INCLUDED as INCLUDED, INDEX as INDEX, JSON as JSON, LANG as LANG, LIST as LIST, NEST as NEST, NONE as NONE, PREFIX as PREFIX, PROPAGATE as PROPAGATE, PROTECTED as PROTECTED, REV as REV, SET as SET, TYPE as TYPE, VALUE as VALUE, VERSION as VERSION, VOCAB as VOCAB
from .util import norm_url as norm_url, source_to_json as source_to_json, split_iri as split_iri, urljoin as urljoin, urlsplit as urlsplit
from collections.abc import Generator
from rdflib.namespace import RDF as RDF
from typing import Any, NamedTuple

NODE_KEYS: Any

class Defined(int): ...

UNDEF: Any
URI_GEN_DELIMS: Any

class Context:
    version: Any
    language: Any
    vocab: Any
    doc_base: Any
    terms: Any
    active: bool
    parent: Any
    propagate: bool
    def __init__(self, source: Any | None = ..., base: Any | None = ..., version: Any | None = ...) -> None: ...
    @property
    def base(self): ...
    @base.setter
    def base(self, base) -> None: ...
    def subcontext(self, source, propagate: bool = ...): ...
    def get_context_for_term(self, term): ...
    def get_context_for_type(self, node): ...
    def get_id(self, obj): ...
    def get_type(self, obj): ...
    def get_language(self, obj): ...
    def get_value(self, obj): ...
    def get_graph(self, obj): ...
    def get_list(self, obj): ...
    def get_set(self, obj): ...
    def get_rev(self, obj): ...
    def get_key(self, key): ...
    def get_keys(self, key) -> Generator[Any, None, None]: ...
    lang_key: Any
    id_key: Any
    type_key: Any
    value_key: Any
    list_key: Any
    rev_key: Any
    graph_key: Any
    def add_term(self, name, idref, coercion=..., container=..., index: Any | None = ..., language=..., reverse: bool = ..., context=..., prefix: Any | None = ..., protected: bool = ...) -> None: ...
    def find_term(self, idref, coercion: Any | None = ..., container=..., language: Any | None = ..., reverse: bool = ...): ...
    def resolve(self, curie_or_iri): ...
    def resolve_iri(self, iri): ...
    def isblank(self, ref): ...
    def expand(self, term_curie_or_iri, use_vocab: bool = ...): ...
    def shrink_iri(self, iri): ...
    def to_symbol(self, iri): ...
    def load(self, source, base: Any | None = ..., referenced_contexts: Any | None = ...) -> None: ...

class Term(NamedTuple):
    id: Any
    name: Any
    type: Any
    container: Any
    index: Any
    language: Any
    reverse: Any
    context: Any
    prefix: Any
    protected: Any
