from collections.abc import Generator
from rdflib.store import Store
from typing import Any

class BerkeleyDB(Store):
    context_aware: bool
    formula_aware: bool
    transaction_aware: bool
    graph_aware: bool
    db_env: Any
    def __init__(self, configuration: Any | None = ..., identifier: Any | None = ...) -> None: ...
    identifier: Any
    def is_open(self): ...
    def open(self, path, create: bool = ...) -> Generator[None, None, Any]: ...
    def sync(self) -> None: ...
    def close(self, commit_pending_transaction: bool = ...) -> None: ...
    def add(self, triple, context, quoted: bool = ..., txn: Any | None = ...) -> None: ...
    def remove(self, spo, context, txn: Any | None = ...) -> None: ...
    def triples(self, spo, context: Any | None = ..., txn: Any | None = ...) -> Generator[Any, None, None]: ...
    def __len__(self, context: Any | None = ...): ...
    def bind(self, prefix, namespace) -> None: ...
    def namespace(self, prefix): ...
    def prefix(self, namespace): ...
    def namespaces(self) -> Generator[Any, None, None]: ...
    def contexts(self, triple: Any | None = ...) -> Generator[Any, None, None]: ...
    def add_graph(self, graph) -> None: ...
    def remove_graph(self, graph) -> None: ...
