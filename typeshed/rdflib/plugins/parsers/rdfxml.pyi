from rdflib.parser import Parser
from rdflib.plugins.parsers.RDFVOC import RDFVOC
from rdflib.term import URIRef
from typing import Any
from xml.sax import handler, xmlreader

RDFNS = RDFVOC

class BagID(URIRef):
    li: int
    def __init__(self, val) -> None: ...
    def next_li(self): ...

class ElementHandler:
    start: Any
    char: Any
    end: Any
    li: int
    id: Any
    base: Any
    subject: Any
    object: Any
    list: Any
    language: Any
    datatype: Any
    declared: Any
    data: Any
    def __init__(self) -> None: ...
    def next_li(self): ...

class RDFXMLHandler(handler.ContentHandler):
    store: Any
    preserve_bnode_ids: bool
    def __init__(self, store) -> None: ...
    stack: Any
    ids: Any
    bnode: Any
    def reset(self) -> None: ...
    locator: Any
    def setDocumentLocator(self, locator) -> None: ...
    def startDocument(self) -> None: ...
    def startPrefixMapping(self, prefix, namespace) -> None: ...
    def endPrefixMapping(self, prefix) -> None: ...
    def startElementNS(self, name, qname, attrs) -> None: ...
    def endElementNS(self, name, qname) -> None: ...
    def characters(self, content) -> None: ...
    def ignorableWhitespace(self, content) -> None: ...
    def processingInstruction(self, target, data) -> None: ...
    def add_reified(self, sid, spo) -> None: ...
    def error(self, message) -> None: ...
    def get_current(self): ...
    current: Any
    def get_next(self): ...
    next: Any
    def get_parent(self): ...
    parent: Any
    def absolutize(self, uri): ...
    def convert(self, name, qname, attrs): ...
    def document_element_start(self, name, qname, attrs) -> None: ...
    def node_element_start(self, name, qname, attrs) -> None: ...
    def node_element_end(self, name, qname) -> None: ...
    def property_element_start(self, name, qname, attrs) -> None: ...
    def property_element_char(self, data) -> None: ...
    def property_element_end(self, name, qname) -> None: ...
    def list_node_element_end(self, name, qname) -> None: ...
    def literal_element_start(self, name, qname, attrs) -> None: ...
    def literal_element_char(self, data) -> None: ...
    def literal_element_end(self, name, qname) -> None: ...

def create_parser(target, store) -> xmlreader.XMLReader: ...

class RDFXMLParser(Parser):
    def __init__(self) -> None: ...
    def parse(self, source, sink, **args) -> None: ...
