from io import BufferedIOBase
from typing import Any
from xml.sax import xmlreader

class Parser:
    def __init__(self) -> None: ...
    def parse(self, source, sink) -> None: ...

class BytesIOWrapper(BufferedIOBase):
    wrapped: Any
    encoding: Any
    encoded: Any
    def __init__(self, wrapped: str, encoding: str = ...) -> None: ...
    def read(self, *args, **kwargs): ...
    def read1(self, *args, **kwargs): ...
    def readinto(self, *args, **kwargs) -> None: ...
    def readinto1(self, *args, **kwargs) -> None: ...
    def write(self, *args, **kwargs) -> None: ...

class InputSource(xmlreader.InputSource):
    content_type: Any
    auto_close: bool
    def __init__(self, system_id: Any | None = ...) -> None: ...
    def close(self) -> None: ...

class PythonInputSource(InputSource):
    content_type: Any
    auto_close: bool
    public_id: Any
    system_id: Any
    data: Any
    def __init__(self, data, system_id: Any | None = ...) -> None: ...
    def getPublicId(self): ...
    def setPublicId(self, public_id) -> None: ...
    def getSystemId(self): ...
    def setSystemId(self, system_id) -> None: ...
    def close(self) -> None: ...

class StringInputSource(InputSource):
    def __init__(self, value, encoding: str = ..., system_id: Any | None = ...) -> None: ...

class URLInputSource(InputSource):
    url: Any
    content_type: Any
    response_info: Any
    def __init__(self, system_id: Any | None = ..., format: Any | None = ...): ...

class FileInputSource(InputSource):
    file: Any
    def __init__(self, file) -> None: ...
