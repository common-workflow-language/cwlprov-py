import argparse
from collections.abc import Generator
from typing import Any, Dict, Tuple, List

def find_locale_dir(): ...

TRANSLATION_CATALOG: Any
MODULE_NAME: Any
LOGGER: Any
VERSION: Any
PROJECT_URL: str
STANDARD_BAG_INFO_HEADERS: Any
CHECKSUM_ALGOS: Any
DEFAULT_CHECKSUMS: Any
HASH_BLOCK_SIZE: Any
open_text_file: Any
UNICODE_BYTE_ORDER_MARK: str

def make_bag(bag_dir, bag_info: Any | None = ..., processes: int = ..., checksums: Any | None = ..., checksum: Any | None = ..., encoding: str = ...): ...

class Bag:
    valid_files: Any = ...
    valid_directories: Any = ...
    tags: Any = ...
    info: Dict[str, str] = ...
    entries: Any = ...
    normalized_filesystem_names: Any = ...
    normalized_manifest_names: Any = ...
    algorithms: Any = ...
    tag_file_name: Any = ...
    path: Any = ...
    def __init__(self, path: Any | None = ...) -> None: ...
    @property
    def algs(self): ...
    @property
    def version(self): ...
    def manifest_files(self) -> None: ...
    def tagmanifest_files(self) -> None: ...
    def compare_manifests_with_fs(self) -> Tuple[List[str], List[str]]: ...
    def compare_fetch_with_fs(self): ...
    def payload_files(self) -> Generator[Any, None, None]: ...
    def payload_entries(self): ...
    def save(self, processes: int = ..., manifests: bool = ...) -> None: ...
    def tagfile_entries(self) -> Dict[str, str]: ...
    def missing_optional_tagfiles(self) -> Generator[str, None, None]: ...
    def fetch_entries(self) -> None: ...
    def files_to_be_fetched(self) -> None: ...
    def has_oxum(self) -> bool: ...
    def validate(self, processes: int = ..., fast: bool = ..., completeness_only: bool = ...): ...
    def is_valid(self, fast: bool = ..., completeness_only: bool = ...): ...
    def validate_fetch(self) -> None: ...

class BagError(Exception): ...

class BagValidationError(BagError):
    message: Any
    details: Any
    def __init__(self, message, details: Any | None = ...) -> None: ...

class ManifestErrorDetail(BagError):
    path: Any
    def __init__(self, path) -> None: ...

class ChecksumMismatch(ManifestErrorDetail):
    path: Any
    algorithm: Any
    expected: Any
    found: Any
    def __init__(self, path, algorithm: Any | None = ..., expected: Any | None = ..., found: Any | None = ...) -> None: ...

class FileMissing(ManifestErrorDetail): ...
class UnexpectedFile(ManifestErrorDetail): ...

class FileNormalizationConflict(BagError):
    file_a: Any
    file_b: Any
    def __init__(self, file_a, file_b) -> None: ...

def posix_multiprocessing_worker_initializer() -> None: ...
def normalize_unicode_py3(s): ...
def normalize_unicode_py2(s): ...
normalize_unicode = normalize_unicode_py3

def build_unicode_normalized_lookup_dict(filenames): ...
def get_hashers(algorithms): ...
def make_manifests(data_dir, processes, algorithms=..., encoding: str = ...): ...
def generate_manifest_lines(filename, algorithms=...): ...
def force_unicode_py2(s): ...
force_unicode = str

class BagArgumentParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs) -> None: ...

class BagHeaderAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string: Any | None = ...) -> None: ...

def main() -> None: ...
